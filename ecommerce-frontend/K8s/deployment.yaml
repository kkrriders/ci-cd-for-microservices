apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: microservices
  labels:
    app: ecommerce
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecommerce
      tier: frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: ecommerce
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: frontend
        image: "$(REGISTRY_URL)/ecommerce-frontend:$(IMAGE_TAG)"
        imagePullPolicy: Always
        env:
        - name: REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: REGISTRY_URL
        - name: IMAGE_TAG
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: IMAGE_TAG
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: API_URL
        - name: NODE_ENV
          value: "production"
        ports:
        - containerPort: 3000
          name: http
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: frontend-config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: frontend-config
        configMap:
          name: frontend-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ecommerce
                - key: tier
                  operator: In
                  values:
                  - frontend
              topologyKey: "kubernetes.io/hostname"
      imagePullSecrets:
      - name: registry-credentials 