name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  workflow_dispatch:     # Allow manual triggering

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Setup CodeQL properly with init first
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
          
      - name: Run dependency scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      # Start services for ZAP scan using Docker Compose
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2
        
      - name: Start services for testing
        run: |
          # Verify docker-compose file exists
          ls -la
          # Use docker compose command (note: no hyphen in newer versions)
          docker compose -f docker-compose.yaml up -d
          # Wait for services to be ready - increased time for services to start
          echo "Waiting for services to be ready..."
          sleep 60
          
      # Check if services are running before ZAP scan
      - name: Verify services are running
        run: |
          docker ps
          # Check if catalog service is ready
          curl --retry 5 --retry-delay 10 --retry-connrefused http://localhost:8082/health || echo "Catalog service health endpoint not responding"
          # Check if orders service is ready
          curl --retry 5 --retry-delay 10 --retry-connrefused http://localhost:8083/health || echo "Orders service health endpoint not responding"
          
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: 'http://localhost:8082/health,http://localhost:8083/health'
          allow_issue_writing: false
          cmd_options: '-c gen.emptyreport=true'
          
      - name: Stop test services
        if: always()
        run: docker compose -f docker-compose.yaml down
          
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan date: $(date)" >> security-report.md
          echo "## Summary" >> security-report.md
          
          # Add dependency scan results
          echo "### Dependency vulnerabilities" >> security-report.md
          if [ -f trivy-results.sarif ]; then
            cat trivy-results.sarif | jq -r '.runs[0].results | length' | xargs -I {} echo "Found {} issues" >> security-report.md
          else
            echo "No Trivy results found" >> security-report.md
          fi
          
          # Add SAST scan results
          echo "### SAST vulnerabilities" >> security-report.md
          echo "See CodeQL results in GitHub Security tab" >> security-report.md
          
          # Add ZAP scan results
          echo "### API vulnerabilities" >> security-report.md
          if [ -f zap-scan-results.json ]; then
            cat zap-scan-results.json | jq -r '.site[0].alerts | length' | xargs -I {} echo "Found {} issues" >> security-report.md
          else
            # Handle cases where the file doesn't exist yet
            echo "No ZAP results found" >> security-report.md
          fi
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          
      - name: Send notification
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 