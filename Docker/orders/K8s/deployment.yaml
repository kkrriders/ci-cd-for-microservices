apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-deployment
  namespace: microservices
  labels:
    app: orders
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: orders
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: orders
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8083"
    spec:
      containers:
      - name: orders
        image: ${REGISTRY_URL}/orders-service:${IMAGE_TAG}
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        ports:
        - containerPort: 8083
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orders-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: orders-config
              key: PORT
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: orders-secrets
              key: MONGO_URI
        - name: REDIS_URI
          valueFrom:
            secretKeyRef:
              name: orders-secrets
              key: REDIS_URI
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: orders-config
              key: LOG_LEVEL
        - name: CATALOG_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: orders-config
              key: CATALOG_SERVICE_URL
        envFrom:
        - configMapRef:
            name: orders-config
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 12
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - orders
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 30
      imagePullSecrets:
      - name: registry-credentials 